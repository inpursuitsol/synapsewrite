"use client";

import { useState, useRef } from "react";

/**
 * Simple streaming UI for /api/stream
 * - Input prompt
 * - Streams token-by-token from the API
 * - Copy to clipboard
 * - Download as Markdown
 * - Simple SEO info: word count + est reading time
 */

export default function Page() {
  const [prompt, setPrompt] = useState("");
  const [output, setOutput] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const controllerRef = useRef(null);

  function resetState() {
    setOutput("");
    setError("");
    setLoading(false);
    if (controllerRef.current) {
      try { controllerRef.current.abort(); } catch {}
      controllerRef.current = null;
    }
  }

  async function handleSubmit(e) {
    e?.preventDefault?.();
    resetState();

    const trimmed = (prompt || "").trim();
    if (!trimmed) {
      setError("Please enter a prompt.");
      return;
    }

    setLoading(true);

    try {
      // Use AbortController so user can cancel if needed
      const controller = new AbortController();
      controllerRef.current = controller;

      const res = await fetch("/api/stream", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt: trimmed }),
        signal: controller.signal,
      });

      if (!res.ok) {
        const text = await res.text();
        setError(`Server error: ${text}`);
        setLoading(false);
        return;
      }

      const reader = res.body.getReader();
      const decoder = new TextDecoder();

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        const chunk = decoder.decode(value, { stream: true });

        // The backend sends `data: {...}\n\n` events
        const lines = chunk.split("\n").filter(Boolean);
        for (const line of lines) {
          if (!line.startsWith("data:")) continue;
          const payload = line.replace(/^data:\s*/, "").trim();
          if (payload === "[DONE]") {
            setLoading(false);
            controllerRef.current = null;
            return;
          }
          try {
            const parsed = JSON.parse(payload);
            if (parsed.text) {
              setOutput((prev) => prev + parsed.text);
            } else if (parsed.raw) {
              // optional: include raw payload
              setOutput((prev) => prev + parsed.raw);
            }
          } catch {
            // malformed JSON — append raw payload
            setOutput((prev) => prev + payload);
          }
        }
      }

      setLoading(false);
      controllerRef.current = null;
    } catch (err) {
      if (err.name === "AbortError") {
        setError("Request cancelled.");
      } else {
        setError(String(err));
      }
      setLoading(false);
      controllerRef.current = null;
    }
  }

  function handleCancel() {
    if (controllerRef.current) {
      try { controllerRef.current.abort(); } catch {}
      controllerRef.current = null;
    }
    setLoading(false);
  }

  function handleCopy() {
    if (!output) return;
    navigator.clipboard.writeText(output).then(
      () => alert("Copied to clipboard"),
      () => alert("Copy failed")
    );
  }

  function downloadMarkdown() {
    if (!output) return;
    const md = `# Generated by SynapseWrite\n\n${output}\n`;
    const blob = new Blob([md], { type: "text/markdown" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "synapsewrite.md";
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  // Simple SEO-ish helpers
  function wordCount(text) {
    if (!text) return 0;
    return text.trim().split(/\s+/).filter(Boolean).length;
  }
  function readingTimeMinutes(text) {
    const wpm = 200;
    const minutes = wordCount(text) / wpm;
    return Math.max(0.1, Math.round(minutes * 10) / 10); // 1 decimal
  }

  return (
    <main style={{ maxWidth: 900, margin: "2rem auto", padding: "0 1rem", fontFamily: "Inter, system-ui, sans-serif" }}>
      <h1 style={{ fontSize: 24, marginBottom: 12 }}>SynapseWrite — Live Demo</h1>

      <form onSubmit={handleSubmit} style={{ display: "flex", gap: 8, marginBottom: 12 }}>
        <input
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder="Enter your prompt (e.g., 'Write a 150-word intro about electric cars')"
          style={{ flex: 1, padding: "10px 12px", border: "1px solid #ddd", borderRadius: 6 }}
          disabled={loading}
        />
        <button type="submit" style={{ padding: "10px 14px", borderRadius: 6, background: "#0b72ff", color: "white", border: "none" }} disabled={loading}>
          {loading ? "Generating..." : "Generate"}
        </button>
        <button type="button" onClick={handleCancel} style={{ padding: "10px 12px", borderRadius: 6 }} disabled={!loading}>
          Cancel
        </button>
      </form>

      {error && <div style={{ color: "crimson", marginBottom: 12 }}>{error}</div>}

      <div style={{ display: "flex", gap: 12, marginBottom: 8 }}>
        <div style={{ flex: 1, border: "1px solid #eee", padding: 12, borderRadius: 8, minHeight: 120, whiteSpace: "pre-wrap", background: "#fff" }}>
          {output || (!loading ? "Output will appear here." : "Waiting for stream...")}
        </div>

        <div style={{ width: 220, border: "1px solid #f0f0f0", padding: 12, borderRadius: 8, background: "#fafafa" }}>
          <div style={{ marginBottom: 8, fontWeight: 600 }}>Info</div>
          <div style={{ fontSize: 13 }}>Words: {wordCount(output)}</div>
          <div style={{ fontSize: 13 }}>Est. reading: {readingTimeMinutes(output)} min</div>
          <div style={{ marginTop: 10, display: "flex", gap: 8 }}>
            <button onClick={handleCopy} disabled={!output} style={{ padding: "6px 8px", borderRadius: 6 }}>Copy</button>
            <button onClick={downloadMarkdown} disabled={!output} style={{ padding: "6px 8px", borderRadius: 6 }}>Download MD</button>
          </div>
        </div>
      </div>

      <div style={{ fontSize: 13, color: "#666" }}>
        Tip: try prompts like <code>Write a 2-sentence intro to SynapseWrite</code> or <code>List 5 blog post ideas about AI content tools</code>.
      </div>
    </main>
  );
}
